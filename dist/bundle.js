(()=>{"use strict";var e={n:o=>{var s=o&&o.__esModule?()=>o.default:()=>o;return e.d(s,{a:s}),s},d:(o,s)=>{for(var t in s)e.o(s,t)&&!e.o(o,t)&&Object.defineProperty(o,t,{enumerable:!0,get:s[t]})},o:(e,o)=>Object.prototype.hasOwnProperty.call(e,o),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},o={};e.r(o),e.d(o,{flds_comp:()=>l,flds_dept:()=>a,flds_user:()=>i,location_type:()=>d,password:()=>c,reserve1:()=>u,reserve2:()=>g,reserve3:()=>f});const s=require("express");var t=e.n(s);const r=require("path");var n=e.n(r);const l="micron_dev01",a="dept0001",i="user0001",c="q45101524Q",d="1100",u="reserve1",g="reserve2",f="reserve3";var m=(0,s.Router)();m.get("/",(function(e,o){o.redirect("/catalog")}));const p=m,y=require("log4js");var _=e.n(y);_().configure({appenders:{std:{type:"stdout",level:"all",layout:{type:"basic"}},std1:{type:"stdout",level:"all",layout:{type:"messagePassThrough"}},file:{type:"file",filename:"./log/controller.log",maxLogSize:2e7,backups:10,encoding:"utf-8"},moverfid:{type:"file",filename:"./log/moverfid.log",maxLogSize:2e5,backups:2,encoding:"utf-8"},al510lowdata:{type:"file",filename:"./log/al510lowdata.log",maxLogSize:4e6,backups:20,encoding:"utf-8"},LogErr:{type:"file",filename:"./log/LogErr.log",maxLogSize:4e6,backups:20,encoding:"utf-8"}},categories:{default:{appenders:["std"],level:"all"},RFID:{appenders:["std","file"],level:"all"},Controller:{appenders:["std","file"],level:"all"},Moverfid:{appenders:["std","moverfid"],level:"info"},Al510lowdata:{appenders:["std","al510lowdata"],level:"info"},LogErr:{appenders:["std","LogErr"],level:"info"}}}),_().getLogger("RFID");const b=_().getLogger("Controller"),$=_().getLogger("LogErr"),E=require("mysql"),q={HOST:"localhost",USER:"root",PASSWORD:"12345678",DB:"micron_dev01",PORT:"3306"};console.log(q);const O=(0,E.createPool)({host:q.HOST,user:q.USER,password:q.PASSWORD,database:q.DB,port:q.PORT}),w=class{constructor(e){this.title=e.title,this.description=e.description,this.published=e.published}static create(e,o){O.query("INSERT INTO tutorials SET ?",e,((s,t)=>{if(s)return console.log("error: ",s),void o(s,null);console.log("created tutorial: ",{id:t.insertId,...e}),o(null,{id:t.insertId,...e})}))}static findById(e,o){O.query(`SELECT * FROM tutorials WHERE id = ${e}`,((e,s)=>e?(console.log("error: ",e),void o(e,null)):s.length?(console.log("found tutorial: ",s[0]),void o(null,s[0])):void o({kind:"not_found"},null)))}static getAll(e,o){let s="SELECT * FROM tutorials";return e&&(s+=` WHERE title LIKE '%${e}%'`),console.log("query:",s),s}static getAllPublished(e){O.query("SELECT * FROM tutorials WHERE published=true",((o,s)=>{if(o)return console.log("error: ",o),void e(null,o);console.log("tutorials: ",s),e(null,s)}))}static updateById(e,o,s){O.query("UPDATE tutorials SET title = ?, description = ?, published = ? WHERE id = ?",[o.title,o.description,o.published,e],((t,r)=>{if(t)return console.log("error: ",t),void s(null,t);0!=r.affectedRows?(console.log("updated tutorial: ",{id:e,...o}),s(null,{id:e,...o})):s({kind:"not_found"},null)}))}static remove(e,o){O.query("DELETE FROM tutorials WHERE id = ?",e,((s,t)=>{if(s)return console.log("error: ",s),void o(null,s);0!=t.affectedRows?(console.log("deleted tutorial with id: ",e),o(null,t)):o({kind:"not_found"},null)}))}static removeAll(e){O.query("DELETE FROM tutorials",((o,s)=>{if(o)return console.log("error: ",o),void e(null,o);console.log(`deleted ${s.affectedRows} tutorials`),e(null,s)}))}},v=(0,s.Router)();v.use((function(e,o,s){console.log("catalog router.use =",e.method+e.url),s()})),v.post("/",(function(e,o){console.log("tutorial.controller create query = %s",e.query),console.log("create body = %s",e.body),console.log("create params = %s",e.params),e.body||o.status(400).send({message:"Content can not be empty!"});let s={message:e.query};o.json(s)})),v.get("/",(async function(e,o){e.query.title,console.log("tutorial.controller findAll query = %s",e.query),console.log("findAll body = %s",e.body),console.log("findAll params = %s",e.params);let s=`${global.userConfig.flds_comp}.rfid_ui_flds_a`;console.log("table: %s",s);try{const e=w.getAll(s);console.log("result"),console.log(e);let t={code:200,msg:"product  find lists.",data:e};o.json(t)}catch(e){o.status(500);let s={code:e.errno,msg:e.code};o.json(s)}})),v.get("/:id",(function(e,o){console.log("tutorial.controller findOne query = %s",e.query),console.log("findOne body = %s",e.body),console.log("findOne params = %s",e.params);let s={code:500,msg:`Not found product_no: ${e.params.id}`};o.status(500),o.json(s),b.info("msgret = %s",JSON.stringify(s))})),v.put("/:id",(function(e,o){console.log("tutorial.controller update query = %s",e.query),console.log("update body = %s",e.body),console.log("update params = %s",e.params),e.body||o.status(400).send({message:"Content can not be empty!"});let s={code:500,msg:`Not found product_no: ${e.params.id}`};o.status(500),o.json(s),b.info("msgret = %s",JSON.stringify(s));let t=`${JSON.stringify(s)}`;$.info("user=%s, func=%s, msg=%s",global.userConfig.flds_user,"export function update(req, res) ",t)})),v.delete("/:id",((e,o)=>{console.log("delete query = %s",e.query),console.log("delete body = %s",e.body),console.log("delete params = %s",e.params);let s={message:e.query};o.json(s)})),require("async"),require("node-fetch");const S=require("util/util.js"),R=class{constructor(e){this.product_no=e.product_no,this.product_name=e.product_name,this.classift=e.classift,this.specification=e.specification,this.unit=e.unit,this.remake=e.remake,this.attribute1=e.attribute1,this.attribute2=e.attribute2,this.attribute3=e.attribute3,this.attribute4=e.attribute4,this.reserve=e.reserve}static create(e,o){return new Promise(((s,t)=>{let r=`INSERT INTO ${o} SET ?`;console.log("query:",r),O.query(r,e,((o,r)=>o?(console.log("error: ",o),t(o)):s({newproduct:e})))}))}static replace(e,o){return new Promise(((s,t)=>{let r=`REPLACE INTO ${o} SET ?`;console.log("query:",r),O.query(r,e,((e,o)=>e?(console.log("error: ",e),t(e)):s(o)))}))}static findById(e,o,s){return new Promise(((s,t)=>{let r=`SELECT * FROM ${o} WHERE product_no = '${e}'`;console.log("query:",r),O.query(r,((e,o)=>e?(console.log("error: ",e),t(e)):(o.length,s(o))))}))}static findByOrders(e,o){return new Promise(((s,t)=>{let r=`SELECT * FROM ${o} WHERE order_no = '${e}'`;console.log("query:",r),O.query(r,((e,o)=>e?(console.log("error: ",e),t(e)):(o.length,s(o))))}))}static findByOrdersName(e,o){return new Promise(((e,s)=>{let t=`SELECT order_no FROM ${o}  GROUP BY order_no`;console.log("query:",t),O.query(t,((o,t)=>o?(console.log("error: ",o),s(o)):(t.length||console.log({result:"not_found"}),e(t))))}))}static findByPn(e,o,s){return new Promise(((s,t)=>{let r=`SELECT * FROM ${o} WHERE product_no LIKE '${e}%'`;console.log("query:",r),O.query(r,((e,o)=>e?(console.log("error: ",e),t(e)):(o.length,s(o))))}))}static findByLocation_id(e,o){return new Promise(((o,s)=>{const t=global.userConfig.flds_comp+".rfid_ui_flds_a";let r=`SELECT ${t}.warehouse_type, ${t}.storage_location, location_tables.luid,location_tables.warehouse_type, location_tables.storage_location,\n    location_tables.epc FROM ${t} JOIN  location_tables ON ${t}.warehouse_type = location_tables.warehouse_type AND ${t}.storage_location = location_tables.storage_location\n    WHERE uid = '${e}'`;console.log("query:",r),O.query(r,((e,t)=>e?(console.log("error: ",e),s(e)):(t.length,o(t))))}))}static findByLocationID(e,o){return new Promise(((s,t)=>{console.log("params:",e);let r=`SELECT * FROM  ${o}  WHERE location_id = '${e.luid}'`;console.log("query:",r),O.query(r,((e,o)=>e?(console.log("error: ",e),t(e)):(o.length,s(o))))}))}static getAll(e,o){return new Promise(((o,s)=>{let t="SELECT * FROM "+e;console.log("query:",t),O.query(t,((e,t)=>e?(console.log("error: ",e),s(e)):o(t)))}))}static findSearch(e,o){return new Promise(((s,t)=>{console.log("params:",o);let r=`SELECT * FROM ${e} WHERE 1 `;o.product_no&&(r+=`AND ${e}.product_no LIKE '${o.product_no}%' `,console.log("params.product_no:",o.product_no)),o.product_name&&(r+=`AND ${e}.product_name LIKE '%${o.product_name}%' `,console.log("params.product_name:",o.product_name)),o.classift&&(r+=`AND ${e}.classift LIKE '${o.classift}%' `,console.log("params.classift:",o.classift)),o.specification&&(r+=`AND ${e}.specification LIKE '%${o.specification}%' `,console.log("params.product_no:",o.specification)),o.limit&&(r+=`LIMIT ${o.limit} `,console.log("params.limit:",o.limit)),o.offset&&(r+=`OFFSET ${o.offset} `,console.log("params.offset:",o.offset)),console.log("query: %s",r),O.query(r,((e,o)=>e?t(e):s(o)))}))}static QryPnStock(e,o){return new Promise(((s,t)=>{console.log("params:",o);let r=`SELECT * FROM ${e} WHERE 1 `;o.pn&&(r+=`AND ${e}.product_no LIKE '${o.pn}%' `,console.log("params.pn:",o.pn)),o.ku1&&(r+=`AND ${e}.warehouse_type >= '${o.ku1}' `,console.log("params.ku1:",o.ku1)),o.ku2&&(r+=`AND ${e}.warehouse_type <= '${o.ku2}' `,console.log("params.ku2:",o.ku2)),o.limit&&(r+=`LIMIT ${o.limit} `,console.log("params.limit:",o.limit)),o.offset&&(r+=`OFFSET ${o.offset} `,console.log("params.offset:",o.offset)),console.log("query: %s",r),O.query(r,((e,o)=>e?t(e):s(o)))}))}static QryKuStock(e,o){return new Promise(((s,t)=>{console.log("params:",o);let r=`SELECT * FROM ${e} WHERE 1 `;o.ku&&(r+=`AND ${e}.warehouse_type = '${o.ku}' `,console.log("params.ku:",o.ku)),o.tw1&&(r+=`AND ${e}.storage_location >= '${o.tw1}' `,console.log("params.tw1:",o.tw1)),o.tw2&&(r+=`AND ${e}.storage_location <= '${o.tw2}' `,console.log("params.tw2:",o.tw2)),o.limit&&(r+=`LIMIT ${o.limit} `,console.log("params.limit:",o.limit)),o.offset&&(r+=`OFFSET ${o.offset} `,console.log("params.offset:",o.offset)),console.log("query: %s",r),O.query(r,((e,o)=>e?t(e):s(o)))}))}static unbound(e,o){return new Promise(((s,t)=>{let r=`SELECT ${e}.*, ${o}.rfid_in_flds_b.location_id FROM ${e}\n    LEFT JOIN ${o}.rfid_in_flds_b\n    ON ${e}.uid = ${o}.rfid_in_flds_b.uid`;console.log("unbound  query:",r),O.query(r,((e,o)=>e?(console.log("error: ",e),t(e)):s(o)))}))}static bind_flds_abc(e,o){return new Promise(((s,t)=>{let r=`SELECT * FROM ${e} WHERE 1 `;o.order_no&&(r+=`AND ${e}.order_no LIKE '${o.order_no}%' `,console.log("params.order_no:",o.order_no)),console.log("bind_flds_abc  query:",r),O.query(r,((e,o)=>e?(console.log("error: ",e),t(e)):s(o)))}))}static bind_flds_ab(e,o){return new Promise(((o,s)=>{let t=`SELECT *  FROM ${e}  WHERE location_id != ""`;console.log("bind_flds_ab  query:",t),O.query(t,((e,t)=>e?(console.log("error: ",e),s(e)):o(t)))}))}static unbound_flds_ab(e,o){return new Promise(((s,t)=>{let r=`SELECT *  FROM ${e}  WHERE location_id = "" `;o.order_no&&(r+=`AND ${e}.order_no LIKE '${o.order_no}%' `,console.log("params.order_no:",o.order_no)),console.log("unbound_flds_ab  query:",r),O.query(r,((e,o)=>e?(console.log("error: ",e),t(e)):s(o)))}))}static updateById(e,o,s){return new Promise(((t,r)=>{let n=`UPDATE ${s} SET ?  WHERE product_no = '${e}'`;console.log("query:",n),O.query(n,o,((e,s)=>e?(console.log("error: ",e),r(e)):0==s.affectedRows?(console.log("error: res.affectedRows == 0"),t([])):t([[o]])))}))}static updateByParams(e,o,s){return new Promise(((t,r)=>{let n=`UPDATE ${s} SET ?  WHERE ${s}.uid = '${e.uid}' `;e.order_no&&(n+=`AND ${s}.order_no = '${e.order_no}' `,console.log("params.order_no:",e.order_no)),console.log("query:",n),O.query(n,o,((e,s)=>e?(console.log("error: ",e),r(e)):0==s.affectedRows?(console.log("error: res.affectedRows == 0"),t([])):t([[o]])))}))}static updateById_old(e,o,s){return new Promise(((t,r)=>{let n=`UPDATE ${s} SET flds_comp = '${o.flds_comp}', order_no = '${o.order_no}', serial_no = '${o.serial_no}',\n    warehouse_type = '${o.warehouse_type}', storage_location = '${o.storage_location}', lot_no = '${o.lot_no}',\n    product_no = '${o.product_no}', product_name = '${o.product_name}', specification = '${o.specification}',\n    quantity = '${o.quantity}',ui_quantity = '${o.ui_quantity}', unit = '${o.unit}', packing_quantity = '${o.packing_quantity}',\n    packing_unit = '${o.packing_unit}', attribute1 = '${o.attribute1}', attribute2 = '${o.attribute2}',\n    attribute3 = '${o.attribute3}', attribute4 = '${o.attribute4}', attribute5 = '${o.attribute5}', ui_check_state = '${o.ui_check_state}'\n    WHERE uid = '${e}'`;console.log("query:",n),O.query(n,((e,s)=>e?(console.log("error: ",e),r(e)):0==s.affectedRows?(console.log("error: res.affectedRows == 0"),t({result:"not_found"})):t(o)))}))}static updateById_flds_b(e,o,s){return new Promise(((t,r)=>{let n=`UPDATE ${s} SET ?  WHERE uid = '${e}'`;console.log("query:",n),O.query(n,o,((e,s)=>e?(console.log("error: ",e),r(e)):0==s.affectedRows?(console.log("error: res.affectedRows == 0"),t({result:"not_found"})):t(o)))}))}static removeParams(e,o){return new Promise(((s,t)=>{let r=`DELETE FROM ${o} `;e.uid?(r+=`WHERE ${o}.uid = '${e.uid}' `,console.log("params.uid:",e.uid),e.order_no&&(r+=`AND ${o}.order_no = '${e.order_no}' `,console.log("params.order_no:",e.order_no))):e.order_no&&(r+=`WHERE ${o}.order_no = '${e.order_no}' `,console.log("params.order_no:",e.order_no)),console.log("query:",r),O.query(r,((o,r)=>o?(console.log("error: ",o),t(o)):0==r.affectedRows?(console.log("error: res.affectedRows == 0"),s([])):(console.log("deleted res: ",r),s([e]))))}))}static remove(e,o){return new Promise(((s,t)=>{let r=`DELETE FROM ${o} WHERE product_no = '${e}'`;console.log("query:",r),O.query(r,((e,o)=>e?(console.log("error: ",e),t(e)):0==o.affectedRows?(console.log("error: res.affectedRows == 0"),s([])):s([o])))}))}static removeAll(e){return new Promise(((o,s)=>{let t=`DELETE FROM ${e} `;console.log("query:",t),O.query(t,((e,t)=>e?(console.log("error: ",e),s(e)):(console.log(`deleted ${t.affectedRows} products`),o(t))))}))}static truncate(e,o){return new Promise(((o,s)=>{let t=`TRUNCATE TABLE  ${e} `;console.log("query:",t),O.query(t,((e,t)=>e?(console.log("error: ",e),s({result:"error: "+e})):(console.log(`Truncate ${t.affectedRows} products`),o(t))))}))}},h=require("moment");var N=e.n(h);const T=function(e){return N()(e).format("YYYY-MM-DD HH:mm:ss")};let L="products";const C=async function(e,o){if(console.log("create query = %s",e.query),console.log("create body = %s",e.body),console.log("create params = %s",e.params),!e.body){let e={service:1,code:400,msg:"Content can not be empty!",data:[]};return o.status(400),void o.json(e)}const s=new R({product_no:e.body.product_no,product_name:e.body.product_name,classift:e.body.classift,specification:e.body.specification,unit:e.body.unit,remake:e.body.remake,attribute1:e.body.attribute1,attribute2:e.body.attribute2,attribute3:e.body.attribute3,attribute4:e.body.attribute4,reserve:e.body.reserve});try{const e=`${global.userConfig.flds_comp}.${L}`;console.log("product = %s",s),await R.create(s,e);let t={service:1,code:200,msg:`product creat successfully  product_no: ${s.product_no}`,data:[]};o.json(t)}catch(e){o.status(500);let s={service:2,code:e.errno,msg:e.code,data:[{msg:e.sqlMessage}]};o.json(s),b.info("msgret = %s",JSON.stringify(s));let t="export const create()",r=`${JSON.stringify(s)}`;$.info("user=%s, func=%s, msg=%s",global.userConfig.flds_user,t,r)}},P=(0,s.Router)();P.use((function(e,o,s){console.log("product router.use =",e.method+e.url),s()})),P.get("/",(async function(e,o){console.log("findAll query = %s",e.query),console.log("findAll body = %s",e.body),console.log("findAll params = %s",e.params);const s=`${global.userConfig.flds_comp}.${L}`;console.log("TABLE_NAME: %s",s);try{const e=await R.getAll(s);if((0,S.isNullOrUndefined)(e[0])){let e={service:2,code:404,msg:"Flds_user Not find list.",data:[]};return o.status(200),o.json(e),void b.info("msgret = %s",e)}const t=e.map((function(e){return Object.assign({},e,{createtime:T(e.createtime),updatetime:T(e.updatetime)})}));o.status(200);let r={service:1,code:200,msg:"product findAll lists.",data:t};o.json(r)}catch(e){o.status(500);let s={service:2,code:e.errno,msg:e.code,data:[{msg:e.sqlMessage}]};o.json(s),b.info("msgret = %s",s);let t="export const findAll()",r=`${JSON.stringify(s)}`;$.info("user=%s, func=%s, msg=%s",global.userConfig.flds_user,t,r)}})),P.post("/",C),P.post("/:id",C),P.get("/findSearch",(async function(e,o){console.log("findSearch query = %s",e.query),console.log("findSearch body = %s",e.body),console.log("findSearch params = %s",e.params);try{const s=`${global.userConfig.flds_comp}.${L}`;console.log("TABLE_NAME: %s",s);const t=await R.findSearch(s,e.query);if((0,S.isNullOrUndefined)(t[0])){let e={service:2,code:404,msg:"Products Not find list.",data:[]};return o.status(200),o.json(e),void b.info("msgret = %s",e)}const r=t.map((function(e){return Object.assign({},e,{createtime:T(e.createtime),updatetime:T(e.updatetime)})}));o.status(200);let n={service:1,code:200,msg:"Products findSearch successfully.",data:r};o.json(n)}catch(e){o.status(500);let s={service:2,code:e.errno,msg:e.code,data:[{msg:e.sqlMessage}]};o.json(s),b.info("msgret = %s",s);let t="export const findSearch()",r=`${JSON.stringify(s)}`;$.info("user=%s, func=%s, msg=%s",global.userConfig.flds_user,t,r)}})),P.get("/:id",(async function(e,o){console.log("findOne query = %s",e.query),console.log("findOne body = %s",e.body),console.log("findOne params = %s",e.params);try{const s=`${global.userConfig.flds_comp}.${L}`,t=await R.findById(e.params.id,s);if((0,S.isNullOrUndefined)(t[0])){let s={service:2,code:404,msg:`Not found product_no: ${e.params.id}`,data:[]};return o.status(200),o.json(s),void b.info("msgret = %s",s)}const r=t.map((function(e){return Object.assign({},e,{createtime:T(e.createtime),updatetime:T(e.updatetime)})}));o.status(200);let n={service:1,code:200,msg:"find  product successfully",data:r};o.json(n)}catch(e){o.status(500);let s={service:2,code:e.errno,msg:e.code,data:[{msg:e.sqlMessage}]};o.json(s),b.info("msgret = %s",s);let t="export const findOne()",r=`${JSON.stringify(s)}`;$.info("user=%s, func=%s, msg=%s",global.userConfig.flds_user,t,r)}})),P.put("/:id",(async function(e,o){console.log("update query = %s",e.query),console.log("update body = %s",e.body),console.log("update params = %s",e.params);const s=new R({product_no:e.params.id,product_name:e.body.product_name,classift:e.body.classift,specification:e.body.specification,unit:e.body.unit,remake:e.body.remake,attribute1:e.body.attribute1,attribute2:e.body.attribute2,attribute3:e.body.attribute3,attribute4:e.body.attribute4,reserve:e.body.reserve});try{const t=`${global.userConfig.flds_comp}.${L}`,r=await R.updateById(e.params.id,s,t);if((0,S.isNullOrUndefined)(r[0])){let e={service:2,code:404,msg:`Not find product_no: ${s.product_no}.`,data:[]};o.status(200),o.json(e),b.info("msgret = %s",e);let t="export const update()",r=`${JSON.stringify(e)}`;return void $.info("user=%s, func=%s, msg=%s",global.userConfig.flds_user,t,r)}let n={service:1,code:200,msg:`Product updateById product_no: ${s.product_no} successfully.`,data:[]};o.json(n)}catch(e){o.status(500);let s={service:2,code:e.errno,msg:e.code,data:[{msg:e.sqlMessage}]};o.json(s),b.info("msgret = %s",s);let t="export const update()",r=`${JSON.stringify(s)}`;$.info("user=%s, func=%s, msg=%s",global.userConfig.flds_user,t,r)}})),P.delete("/:id",(async function(e,o){console.log("delete query = %s",e.query),console.log("delete body = %s",e.body),console.log("delete params = %s",e.params);try{const s=`${global.userConfig.flds_comp}.${L}`,t=await R.remove(e.params.id,s);if((0,S.isNullOrUndefined)(t[0])){let s={service:2,code:404,msg:`Delete not found product_no: ${e.params.id}`,data:[]};o.status(200),o.json(s),b.info("msgret = %s",JSON.stringify(s));let t="export const deleteID()",r=`${JSON.stringify(s)}`;$.info("user=%s, func=%s, msg=%s",global.userConfig.flds_user,t,r)}else{let s={service:1,code:200,msg:`deleteOne successfully product_no: ${e.params.id}`,data:[]};o.json(s)}}catch(e){o.status(500);let s={service:2,code:e.errno,msg:e.code,data:[{msg:e.sqlMessage}]};o.json(s),b.info("msgret = %s",JSON.stringify(s));let t="export const create()",r=`${JSON.stringify(s)}`;$.info("user=%s, func=%s, msg=%s",global.userConfig.flds_user,t,r)}}));const j=P,A=class{constructor(e){this.user_id=e.user_id,this.name=e.name,this.deptid=e.deptid,this.state=e.state,this.password=e.password}static create(e,o){return new Promise(((s,t)=>{let r=`INSERT INTO ${o} SET ?`;console.log("query:",r),O.query(r,e,((o,r)=>o?(console.log("error: ",o),t(o)):(console.log(r),console.log("created Flds_user: ",{...e}),s({...e}))))}))}static findById(e,o){return new Promise(((s,t)=>{let r=`SELECT * FROM ${o} WHERE user_id = '${e}'`;console.log("query:",r),O.query(r,((e,o)=>e?(console.log("error: ",e),t(e)):(o.length,s(o))))}))}static getAll(e,o){return new Promise(((o,s)=>{let t="SELECT * FROM "+e;console.log("query:",t),O.query(t,((e,t)=>e?s(e):o(t)))}))}static findSearch(e,o){return new Promise(((s,t)=>{console.log("params:",o);let r=`SELECT * FROM ${e} WHERE 1 `;o.user_id&&(r+=`AND user_id LIKE '${o.user_id}%' `,console.log("params.user_id:",o.user_id)),o.deptid&&(r+=`AND deptid LIKE '${o.deptid}%' `,console.log("params.deptid:",o.deptid)),o.limit&&(r+=`LIMIT ${o.limit} `,console.log("params.limit:",o.limit)),o.offset&&(r+=`OFFSET ${o.offset} `,console.log("params.offset:",o.offset)),console.log("query: %s",r),O.query(r,((e,o)=>e?t(e):s(o)))}))}static updateById(e,o,s){return new Promise(((t,r)=>{let n=`UPDATE ${s} SET ?  WHERE user_id = '${e}'`;console.log("query:",n),O.query(n,o,((e,s)=>e?(console.log("error: ",e),r(e)):0==s.affectedRows?(console.log("error: res.affectedRows == 0"),t([])):t([o])))}))}static remove(e,o){return new Promise(((s,t)=>{let r=`DELETE FROM ${o} WHERE user_id = '${e}'`;console.log("query:",r),O.query(r,((e,o)=>e?(console.log("error: ",e),t(e)):0==o.affectedRows?(console.log("error: res.affectedRows == 0"),s([])):s([o])))}))}static removeAll(e){return new Promise(((o,s)=>{let t=`DELETE FROM ${e} `;console.log("query:",t),O.query(t,((t,r)=>t?(console.log("error: ",t),s(t)):(console.log(`deleted ${r.affectedRows}  ${e}`),o(r))))}))}static truncate(e,o){return new Promise(((o,s)=>{let t=`TRUNCATE TABLE  ${e} `;console.log("query:",t),O.query(t,((t,r)=>t?(console.log("error: ",t),s({result:"error: "+t})):(console.log(`Truncate ${r.affectedRows}  ${e}`),o(r))))}))}};let M="flds_user";const F=async function(e,o){if(console.log("create query = %s",e.query),console.log("create body = %s",e.body),console.log("create params = %s",e.params),!e.body){let e={message:"Content can not be empty!"};return o.status(400),void o.json(e)}try{const s=new A({user_id:e.body.user_id,name:e.body.name,state:e.body.state,deptid:e.body.deptid,password:e.body.password});console.log("Flds_user = %s",s);const t=`${global.userConfig.flds_comp}.${M}`,r=await A.create(s,t);console.log("result2"),console.log(r);let n={service:1,code:200,msg:`Flds_user creat successfully  user_id: ${r.user_id}`,data:[]};o.json(n)}catch(e){o.status(500);let s={service:2,code:e.errno,msg:e.code,data:[{msg:e.sqlMessage}]};o.json(s),b.info("msgret = %s",JSON.stringify(s));let t="export const create()",r=`${JSON.stringify(s)}`;$.info("user=%s, func=%s, msg=%s",global.userConfig.flds_user,t,r)}},I=(0,s.Router)();I.use((function(e,o,s){console.log("flds_user.router.use =",e.method+e.url),s()})),I.get("/",(async(e,o)=>{console.log("findAll query = %s",e.query),console.log("findAll body = %s",e.body),console.log("findAll params = %s",e.params);let s=`${global.userConfig.flds_comp}.${M}`;console.log("table: %s",s);try{const e=await A.getAll(s);if((0,S.isNullOrUndefined)(e[0])){o.status(200);let e={service:2,code:404,msg:"Flds_user Not find list.",data:[]};return void o.json(e)}const t=e.map((function(e){return Object.assign({},e,{createtime:T(e.createtime),updatetime:T(e.updatetime)})}));o.status(200);let r={service:1,code:200,msg:"flds_user findAll successfully....",data:t};o.json(r),console.log(r)}catch(e){o.status(500);let s={service:2,code:e.errno,msg:e.code,data:[{msg:e.sqlMessage}]};o.json(s),b.info("msgret = %s",JSON.stringify(s));let t="export const findAll()",r=`${JSON.stringify(s)}`;$.info("user=%s, func=%s, msg=%s",global.userConfig.flds_user,t,r)}})),I.get("/findsearch",(async function(e,o){console.log("findSearch query = %s",e.query),console.log("findSearch body = %s",e.body),console.log("findSearch params = %s",e.params);try{let s=`${global.userConfig.flds_comp}.${M}`;console.log("table: %s",s);const t=await A.findSearch(s,e.query);if(console.log("result1"),console.log(t),(0,S.isNullOrUndefined)(t[0])){o.status(200);let e={service:2,code:404,msg:"Flds_user Not find list.",data:[]};return void o.json(e)}const r=t.map((function(e){return Object.assign({},e,{createtime:T(e.createtime),updatetime:T(e.updatetime)})}));o.status(200);let n={service:1,code:200,msg:"Flds_user findSearch successfully.",data:r};o.json(n)}catch(e){o.status(500);let s={service:2,code:e.errno,msg:e.code,data:[{msg:e.sqlMessage}]};o.json(s),b.info("msgret = %s",JSON.stringify(s));let t="export const findSearch()",r=`${JSON.stringify(s)}`;$.info("user=%s, func=%s, msg=%s",global.userConfig.flds_user,t,r)}})),I.get("/:id",(async function(e,o){console.log("Flds_user findOne query = %s",e.query),console.log("Flds_user findOne body = %s",e.body),console.log("Flds_user findOne params = %s",e.params);const s=`${global.userConfig.flds_comp}.${M}`;try{let t=await A.findById(e.params.id,s);if((0,S.isNullOrUndefined)(t[0])){let s={service:2,code:404,msg:`Not found user_id: ${e.params.id}`,data:[]};return o.status(200),o.json(s),void b.info("msgret = %s",s)}const r=t.map((function(e){return Object.assign({},e,{createtime:T(e.createtime),updatetime:T(e.updatetime)})}));let n={service:1,code:200,msg:`Flds_user findOne:  ${e.params.id} successfully.`,data:r};o.json(n),console.log(n)}catch(e){o.status(500);let s={service:2,code:e.errno,msg:e.code,data:[{msg:e.sqlMessage}]};o.json(s),b.info("msgret = %s",JSON.stringify(s));let t="export const findOne()",r=`${JSON.stringify(s)}`;$.info("user=%s, func=%s, msg=%s",global.userConfig.flds_user,t,r)}})),I.post("/",F),I.post("/:id",F),I.put("/:id",(async(e,o)=>{console.log("update query = %s",e.query),console.log("update body = %s",e.body),console.log("update params = %s",e.params);try{const s=new A({user_id:e.params.id,name:e.body.name,state:e.body.state,deptid:e.body.deptid,password:e.body.password}),t=`${global.userConfig.flds_comp}.${M}`,r=await A.updateById(e.params.id,s,t);if((0,S.isNullOrUndefined)(r[0])){let s={service:2,code:404,msg:`Not found id: ${e.params.id}`,data:[]};o.status(200),o.json(s),b.info("msgret = %s",JSON.stringify(s));let t="export const update()",r=`${JSON.stringify(s)}`;$.info("user=%s, func=%s, msg=%s",global.userConfig.flds_user,t,r)}else{let e={service:1,code:200,msg:`Flds_user updateById user_id: ${s.user_id} successfully.`,data:[]};o.json(e)}}catch(e){o.status(500);let s={service:2,code:e.errno,msg:e.code,data:[{msg:e.sqlMessage}]};o.json(s),b.info("msgret = %s",JSON.stringify(s));let t="export const create()",r=`${JSON.stringify(s)}`;$.info("user=%s, func=%s, msg=%s",global.userConfig.flds_user,t,r)}})),I.delete("/:id",(async function(e,o){console.log("delete query = %s",e.query),console.log("delete body = %s",e.body),console.log("delete params = %s",e.params);try{const s=`${global.userConfig.flds_comp}.${M}`,t=await A.remove(e.params.id,s);if((0,S.isNullOrUndefined)(t[0])){let s={service:2,code:404,msg:`Delete not found id: ${e.params.id}`,data:[]};o.status(200),o.json(s),b.info("msgret = %s",JSON.stringify(s));let t="export const deleteID()",r=`${JSON.stringify(s)}`;$.info("user=%s, func=%s, msg=%s",global.userConfig.flds_user,t,r)}else{let s={service:1,code:200,msg:`deleteOne successfully user_id: ${e.params.id}`,data:[]};o.json(s)}}catch(e){o.status(500);let s={service:2,code:e.errno,msg:e.code,data:[{msg:e.sqlMessage}]};o.json(s),b.info("msgret = %s",JSON.stringify(s));let t="export const create()",r=`${JSON.stringify(s)}`;$.info("user=%s, func=%s, msg=%s",global.userConfig.flds_user,t,r)}}));const D=I,k=require("cookie-parser");var J=e.n(k);require("body-parser");const H=require("url");global.userConfig=o;const W=(0,H.fileURLToPath)("file:///D:/PRG/nodejs/Micron/express-es6-sample/server/index.js"),B=(0,r.dirname)(W),x=t()();x.use(t().urlencoded({extended:!0})),x.use(J()()),x.use(t().static(n().join(B,"public"))),x.use(t().json()),x.use("/",p),x.use("/catalog/user",D),x.use("/catalog/product",j),x.use((function(e,o,s){let t={service:1,code:404,msg:"url not found ......",data:[{msg:e.url}]};o.status(404),o.json(t)})),x.set("port",process.env.PORT||3e3);const U=x.listen(x.get("port"),(function(){console.log("Express server listening on port "+U.address().port)}))})();